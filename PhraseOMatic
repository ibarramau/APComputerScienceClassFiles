/* *** New Project ***
/* Goal: Take String input from user and use that input to produce a deliberate output of buzzwords, non-offensive insults, etc.
/* Details: 1. You must make a TESTER or CLIENT class that will make objects of the class PhraseOMatic and call the method makePhrase.
/* 2. the Tester class must take user input
/* 3. you must make another method of makePhrase to overload it with parameters from given from the String characters of user input
/* see this URL for an example of a successful implementation 
/* http://www.slate.com/articles/news_and_politics/low_concept/2015/06/justice_scalia_insult_generator_how_the_supreme_court_justice_would_mock.html
*/

// Add Client / Tester / Driver Class
/* @author cservenakt
 *
 */
import java.util.Scanner;

public class MainPhrase 
{

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		//Scanner input = new Scanner(System.in);
		
	
		PhraseMatic firstTalk = new PhraseMatic();
		System.out.print(firstTalk.makePhrase());

	}

}




// This class creates objects that produce random 3 word phrases
// create semi-random three word string paired to 
import java.util.Scanner;
// the constructor is the class if no other methods with 
//same name exist
public class PhraseMatic {
	
	// generate three different types of constructors
	// first constructor comes with given String "What we need is " + phrase
	
	// second constructor gives a user created string output, 
	//@param String input from Scanner class
	
	// third constructor gives user created String output,
	//@param String input for phrase, plus takes user's name 
	// and generates user output based on the char value of user's supplied name
	/*public static void main (String args[])
	{
		
		 String[] wordListOne = {"24/7","multi-Tier","30,OOO foot","B-to-B","win-win","frontend", "web-based" ,"pervasive" , "smart", "six-sigma","critical-path", "dynamic"}; 
		 String[] wordListTwo = {"empowered", "sticky", "valued-added", "oriented", "centric", "distributed", "clustered", "branded","outside-the-box", "positioned", "networked", "focused", "leveraged", "aligned", "targeted", "shared", "cooperative", "accelerated"}; 
		 String[] wordListThree = {"process", "tipping point", "solution", "architecture", "core competency", "strategy", "mindshare", "portal", "space", "vision", "paradigm", "mission"}; 
		 
		 // find out how many words are in each list 
		  int oneLength = wordListOne.length; 
		  int twoLength = wordListTwo.length; 
		  int threeLength = wordListThree.length; 
		  
		  int rand1 = (int) (Math.random() * oneLength);
		  int rand2 = (int) (Math.random() * twoLength);
		  int rand3 = (int) (Math.random() * threeLength);
		  
		  // concatenate the strings to phrase
		  String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
		  System.out.print ("What we need is a " + phrase);
		
		
	}
	*/
	public static String makePhrase()
	
	{
		 String[] wordListOne = {"24/7","multi-Tier","30,OOO foot","B-to-B","win-win","frontend", "web-based" ,"pervasive" , "smart", "six-sigma","critical-path", "dynamic"}; 
		 String[] wordListTwo = {"empowered", "sticky", "valued-added", "oriented", "centric", "distributed", "clustered", "branded","outside-the-box", "positioned", "networked", "focused", "leveraged", "aligned", "targeted", "shared", "cooperative", "accelerated"}; 
		 String[] wordListThree = {"process", "tipping point", "solution", "architecture", "core competency", "strategy", "mindshare", "portal", "space", "vision", "paradigm", "mission"}; 
		 
		 // find out how many words are in each list 
		  int oneLength = wordListOne.length; 
		  int twoLength = wordListTwo.length; 
		  int threeLength = wordListThree.length; 
		  
		  int rand1 = (int) (Math.random() * oneLength);
		  int rand2 = (int) (Math.random() * twoLength);
		  int rand3 = (int) (Math.random() * threeLength);
		  
		  // concatenate the strings to phrase
		  String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
		  return ("What we need is a " + phrase);
		  
		}
public static String makePhrase(String startPhrase)
	
	{
		 String[] wordListOne = {"24/7","multi-Tier","30,OOO foot","B-to-B","win-win","frontend", "web-based" ,"pervasive" , "smart", "six-sigma","critical-path", "dynamic"}; 
		 String[] wordListTwo = {"empowered", "sticky", "valued-added", "oriented", "centric", "distributed", "clustered", "branded","outside-the-box", "positioned", "networked", "focused", "leveraged", "aligned", "targeted", "shared", "cooperative", "accelerated"}; 
		 String[] wordListThree = {"process", "tipping point", "solution", "architecture", "core competency", "strategy", "mindshare", "portal", "space", "vision", "paradigm", "mission"}; 
		 
		 // find out how many words are in each list 
		  int oneLength = wordListOne.length; 
		  int twoLength = wordListTwo.length; 
		  int threeLength = wordListThree.length; 
		  
		  int rand1 = (int) (Math.random() * oneLength);
		  int rand2 = (int) (Math.random() * twoLength);
		  int rand3 = (int) (Math.random() * threeLength);
		  
		  // concatenate the strings to phrase
		  String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
		 // String
		  return ("What we need is a " + phrase);
		  
		}
	
	
	
	}


